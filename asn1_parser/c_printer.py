import os
from enum import Enum
from typing import Dict, List, Optional

import cgen

from asn1_parser.c_data import CData


class HeaderType(Enum):
    STORED_DATA = 0
    MSG = 1
    MSGIDS = 2
    STORED_DATA_BINARY = 3


class CPrinter:

    ASN1_HEADER_COMMENT: str = "This file was autogenerated from ASN.1 model."

    def __init__(self) -> None:
        pass

    def __str__(self) -> str:
        pass

    @classmethod
    def generate_cfs_circular_import_guard(
        cls, filename: str, opening: bool
    ) -> str:
        c_style_filename = (
            cls.asn1_to_c_style_naming(filename).replace(".", "_").upper()
        )
        symbol = f"ASN1_PARSER_{c_style_filename}_INCLUDED"
        if opening:
            return f"#ifndef {symbol}\n#define {symbol}\n"
        return f"#endif // {symbol}\n"

    @classmethod
    def generate_cfs_header(
        cls, file_documentation: Optional[str] = None
    ) -> str:
        comment: str = cls.ASN1_HEADER_COMMENT

        if file_documentation:
            comment += "\n\n" + file_documentation

        return str(cgen.Comment("\n" + comment + "\n", skip_space=True)) + "\n"

    @classmethod
    def asn1_to_c_style_naming(cls, name: str) -> str:
        if name in ["IA5String", "NumericString"]:
            return "char"

        return name.replace("-", "_")

    @staticmethod
    def print_to_file(
        cdata: CData,
        filename: str,
        output_folder: str,
        header_type: HeaderType,
    ) -> None:
        filename_h: str = filename + ".h"
        filename_c: str = filename + ".c"
        header_comment: str = ""
        if (
            header_type is HeaderType.MSG
            or header_type is HeaderType.STORED_DATA
            or header_type is HeaderType.STORED_DATA_BINARY
        ):
            header_comment = cdata.get_header_comment()

        # HEADER file

        with open(
            file=os.path.join(output_folder, filename_h),
            mode="w",
            encoding="utf-8",
        ) as file:
            file.write(
                CPrinter.generate_cfs_circular_import_guard(
                    filename_h, opening=True
                )
            )
            file.write("\n")
            file.write(CPrinter.generate_cfs_header(header_comment))
            file.write("\n")

            if (
                header_type is HeaderType.MSG
                or header_type is HeaderType.STORED_DATA
                or header_type is HeaderType.STORED_DATA_BINARY
            ):
                if cdata.is_stdbool_needed():
                    file.write(str(cgen.Include("stdbool.h")))
                    file.write("\n")
                if cdata.is_stdint_needed():
                    # include predefined types
                    file.write(str(cgen.Include("stdint.h")))
                    file.write("\n")

            if (
                header_type is HeaderType.MSG
                or header_type is HeaderType.STORED_DATA
                or header_type is HeaderType.STORED_DATA_BINARY
            ):
                include_list = cdata.get_include_list()
                if include_list:
                    for included_definition in include_list:
                        file.write(included_definition)
                        file.write("\n")

            if header_type is HeaderType.MSGIDS:
                define_list = cdata.get_define_list()
                if define_list:
                    for included_definition in define_list:
                        file.write(included_definition)
                        file.write("\n")
                    file.write("\n")

            if (
                header_type is HeaderType.MSG
                or header_type is HeaderType.STORED_DATA
                or header_type is HeaderType.STORED_DATA_BINARY
            ):
                file.write("\n")
                data = cdata.get_data()
                if data:
                    for included_definition in data:
                        file.write(included_definition)
                        file.write("\n\n")

            if header_type is HeaderType.STORED_DATA:
                init_list = cdata.get_init_list_predef()
                if init_list:
                    for predef in init_list:
                        file.write(predef)
                        file.write("\n")
                    file.write("\n")

            file.write(
                CPrinter.generate_cfs_circular_import_guard(
                    filename_h, opening=False
                )
            )

        # C file

        if header_type is HeaderType.STORED_DATA:
            with open(
                file=os.path.join(output_folder, filename_c),
                mode="w",
                encoding="utf-8",
            ) as file:
                file.write(CPrinter.generate_cfs_header(header_comment))
                file.write("\n")

                init_include = cdata.get_init_include()
                if init_include:
                    file.write(init_include)
                    file.write("\n\n")

                init_list = cdata.get_init_list()
                if init_list:
                    for init in init_list:
                        file.write(init)

        # binary file

        if header_type is HeaderType.STORED_DATA_BINARY:
            binary_init: Dict[str, List[bytes]] = cdata.get_binary_init()
            if binary_init:
                for filename_bin, init_byte_list in binary_init.items():
                    with open(  # type: ignore
                        file=os.path.join(output_folder, filename_bin + ".bin"),
                        mode="wb",
                    ) as file:
                        for byte_representation in init_byte_list:
                            file.write(byte_representation)  # type: ignore
